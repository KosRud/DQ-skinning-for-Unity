// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "DQ.cginc"

float4 parent_rotation_quaternion;
float4 parent_translation_quaternion;
float4 parent_scale;

struct boneWeight
{
	int boneIndex0;
	int boneIndex1;
	int boneIndex2;
	int boneIndex3;

	float boneWeight0;
	float boneWeight1;
	float boneWeight2;
	float boneWeight3;
};

RWStructuredBuffer<dual_quaternion> pose_dual_quaternions;
RWStructuredBuffer<dual_quaternion> bind_dual_quaternions;
RWStructuredBuffer<dual_quaternion> skinned_dual_quaternions;

[numthreads(1024,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	struct dual_quaternion dq_parent;
	struct dual_quaternion dq_pose;
	struct dual_quaternion dq_bind;

	dq_parent	.rotation_quaternion = parent_rotation_quaternion;
	dq_pose		.rotation_quaternion = pose_dual_quaternions.Load(id.x).rotation_quaternion;
	dq_bind		.rotation_quaternion = bind_dual_quaternions.Load(id.x).rotation_quaternion;

	dq_parent	.translation_quaternion = parent_translation_quaternion;
	dq_pose		.translation_quaternion = pose_dual_quaternions.Load(id.x).translation_quaternion;
	dq_bind		.translation_quaternion = bind_dual_quaternions.Load(id.x).translation_quaternion;

	dq_parent	.translation_quaternion = QuaternionMultiply(dq_parent	.rotation_quaternion,		dq_parent	.translation_quaternion	) * 0.5;
	dq_pose		.translation_quaternion = QuaternionMultiply(dq_pose	.translation_quaternion,	dq_pose		.rotation_quaternion	) * 0.5;
	dq_bind		.translation_quaternion = QuaternionMultiply(dq_bind	.translation_quaternion,	dq_bind		.rotation_quaternion	) * 0.5;

	struct dual_quaternion dq_skinned = DualQuaternionMultiply(dq_parent, dq_pose);
	
	dq_skinned.translation_quaternion /= parent_scale;
	
	dq_skinned = DualQuaternionMultiply(dq_skinned, dq_bind);

	skinned_dual_quaternions[id.x].rotation_quaternion		= dq_skinned.rotation_quaternion;
	skinned_dual_quaternions[id.x].translation_quaternion	= dq_skinned.translation_quaternion;
}