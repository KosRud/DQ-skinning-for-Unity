// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "DQ.cginc"

struct bone_weight_info
{
	int4 bone_indexes;
	float4 bone_weights;
};

struct vertex_info
{
	float4 position;
	float4 normal;
	float4 tangent;

	int4 bone_indexes;
	float4 bone_weights;

	float compensation_coef;
};

float compensation_coef;

RWStructuredBuffer<dual_quaternion> skinned_dual_quaternions;
RWStructuredBuffer<vertex_info> vertex_infos;

uint textureWidth;
RWTexture2D<float4> skinned_data_1;
RWTexture2D<float4> skinned_data_2;
RWTexture2D<float2> skinned_data_3;

RWStructuredBuffer<float4> bone_directions;

struct vertex_info SkinVertex(struct vertex_info vertinfo)
{
	int4 bone_indexes	= vertinfo.bone_indexes;
	float4 bone_weights	= vertinfo.bone_weights;

	struct dual_quaternion dq0 = skinned_dual_quaternions.Load(bone_indexes[0]);
	struct dual_quaternion dq1 = skinned_dual_quaternions.Load(bone_indexes[1]);
	struct dual_quaternion dq2 = skinned_dual_quaternions.Load(bone_indexes[2]);
	struct dual_quaternion dq3 = skinned_dual_quaternions.Load(bone_indexes[3]);

	dq1 = DualQuaternionShortestPath(dq1, dq0);
	dq2 = DualQuaternionShortestPath(dq2, dq0);
	dq3 = DualQuaternionShortestPath(dq3, dq0);

	struct dual_quaternion skinned_dq;
	skinned_dq.rotation_quaternion =	dq0.rotation_quaternion * bone_weights[0];
	skinned_dq.rotation_quaternion +=	dq1.rotation_quaternion * bone_weights[1];
	skinned_dq.rotation_quaternion +=	dq2.rotation_quaternion * bone_weights[2];
	skinned_dq.rotation_quaternion +=	dq3.rotation_quaternion * bone_weights[3];

	skinned_dq.translation_quaternion =		dq0.translation_quaternion * bone_weights[0];
	skinned_dq.translation_quaternion +=	dq1.translation_quaternion * bone_weights[1];
	skinned_dq.translation_quaternion +=	dq2.translation_quaternion * bone_weights[2];
	skinned_dq.translation_quaternion +=	dq3.translation_quaternion * bone_weights[3];

	float mag = length(skinned_dq.rotation_quaternion);
	skinned_dq.rotation_quaternion		/= mag;
	skinned_dq.translation_quaternion	/= mag;

	vertinfo.position	= QuaternionApplyRotation(vertinfo.position,	skinned_dq.rotation_quaternion);
	vertinfo.normal		= QuaternionApplyRotation(vertinfo.normal,		skinned_dq.rotation_quaternion);
	vertinfo.tangent	= QuaternionApplyRotation(vertinfo.tangent,		skinned_dq.rotation_quaternion);

	vertinfo.position += QuaternionMultiply(skinned_dq.translation_quaternion * 2, QuaternionInvert(skinned_dq.rotation_quaternion));
	vertinfo.normal = normalize(vertinfo.normal);
	vertinfo.tangent = normalize(vertinfo.tangent);

	// experimental

	float4 rq = QuaternionMultiply(dq0.rotation_quaternion, QuaternionInvert(dq1.rotation_quaternion));

	if (bone_weights[1] != 0.0 && length(rq.xyz) > 0.001)
	{
		float3 axis = normalize(rq.xyz);

		float4 boneDir0 = bone_directions.Load(bone_indexes[0]);
		float4 boneDir1 = bone_directions.Load(bone_indexes[1]);

		if (bone_indexes[0] > bone_indexes[1])
		{
			boneDir0 *= -1;
		}
		else
		{
			boneDir1 *= -1;
		}

		//float angleCoef = saturate(2.0*sqrt(1.0 - rq.w));				// twisting should not increase coef, only bending
		//float angleCoef = saturate(length(boneDir0 + boneDir1)) * 0.71;	// what if bones started at an angle?

		rq.xyz *= dot(rq.xyz, axis);
		rq = normalize(rq);
		float angleCoef = saturate(2.0*sqrt(1.0 - rq.w));
		// we don't need actual projected rotation, just the angle
		// https://stackoverflow.com/questions/3684269/component-of-a-quaternion-rotation-around-an-axis
		// http://www.euclideanspace.com/maths/geometry/rotations/for/decomposition/
		// http://www.euclideanspace.com/maths/geometry/rotations/for/decomposition/forum.htm
		// "Fiber Bundle Twist Reduction" Ken Shoemake in "Graphics Gems IV".

		float3 bisector = normalize(boneDir0.xyz + boneDir1.xyz);	// =0 if bones were aligned (twist only)
		float3 offset = any(bisector) ? cross(axis, bisector) : 0;

		//float angleCoef = saturate(2.0*sqrt(1.0-rq.w));

		float x = bone_weights[1] / (bone_weights[0] + bone_weights[1]);
		//float compensation = 2.29*x-9.1*x*x+9.04*x*x*x;	// better outter shape
		//float compensation = 1.89*x-6.78*x*x+6*x*x*x;		// better inner shape
		float compensation = 2.2*x-8.1*x*x+7.4*x*x*x;		// compromise
		//float compensation = 2.5*x-9.3*x*x+8.6*x*x*x;		// compromise improvement attempt


		compensation *= vertinfo.compensation_coef;
		compensation *= compensation_coef;
		compensation *= angleCoef;
		compensation *= 1.0 - bone_weights[2] / bone_weights[1];
		
		vertinfo.position.xyz += offset * compensation;
	}

	return vertinfo;
}

[numthreads(1024,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	int2 pos;
	pos.x = id.x % textureWidth;
	pos.y = id.x / textureWidth;

	struct vertex_info vertinfo = vertex_infos.Load(id.x);

	vertinfo = SkinVertex(vertinfo);

	skinned_data_1[pos] = float4(vertinfo.position.xyz, vertinfo.normal.x);
	skinned_data_2[pos] = float4(vertinfo.normal.yz, vertinfo.tangent.xy);
	skinned_data_3[pos] = vertinfo.tangent.zw;
}
