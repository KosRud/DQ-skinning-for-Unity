// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "DQ.cginc"

struct vertex_info
{
    float4 position;
    float4 normal;
    float4 tangent;

    int4 bone_indexes;
    float4 bone_weights;

    float compensation_coef;
};

struct morph_delta
{
    float4 position;
    float4 normal;
    float4 tangent;
};

RWStructuredBuffer<vertex_info> source;
RWStructuredBuffer<vertex_info> target;
RWStructuredBuffer<morph_delta> delta;

float weight;

[numthreads(1024, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    vertex_info vert_info = source.Load(id.x);
    const morph_delta morph_info = delta.Load(id.x);

    vert_info.position += morph_info.position * weight;
    vert_info.normal   += morph_info.normal   * weight;
    vert_info.tangent  += morph_info.tangent  * weight;

    target[id.x] = vert_info;
}
